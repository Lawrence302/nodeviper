{
  "swagger": "2.0",
  "info": {
    "title": "Snake App API",
    "description": "Backend API for Snake app",
    "version": "1.0.0"
  },
  "host": "localhost:3000",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "bearerAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "JWT Authorization header using the Bearer scheme. Example: \"Bearer {token}\""
    }
  },
  "paths": {
    "/": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": " get list of all users",
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/{user_id}": {
      "delete": {
        "tags": [
          "admin"
        ],
        "summary": " Delete a user ",
        "description": "",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/register": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "User registration",
        "description": "Register a new user with username, email, password, confirmPassword.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "johnMax"
                },
                "email": {
                  "type": "string",
                  "example": "john@example.com"
                },
                "password": {
                  "type": "string",
                  "example": "123456"
                },
                "confirmPassword": {
                  "type": "string",
                  "example": "123456"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User registered successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Registration success"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 4
                    },
                    "username": {
                      "type": "string",
                      "example": "johndoe"
                    },
                    "token": {
                      "type": "string",
                      "example": "jwt token"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "passwords and confirmPassword do not match",
            "schema": {
              "type": "object",
              "properties": {
                "sucess": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "password and confirmPassword must be same"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "409": {
            "description": "username already exist OR email already exist",
            "schema": {
              "type": "object",
              "properties": {
                "sucess": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "username already taken / user already registered with this email"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Token generation failed or unexpected server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "User registered but failed to login or Server error or Registration failed"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "User login",
        "description": "Login with email and password to receive JWT access token and refresh token cookie.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "john@example.com"
                },
                "password": {
                  "type": "string",
                  "example": "123456"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User logged in successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "user loggedin"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    },
                    "username": {
                      "type": "string",
                      "example": "johnDoe"
                    }
                  }
                },
                "token": {
                  "type": "string",
                  "example": "jwt token"
                },
                "expiresAt": {
                  "type": "string",
                  "example": "token expiry timestamp"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Incorrect email or password",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "incorrect email or password"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "user not found please register first"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Login failed due to server error or other operational erros",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "login failed"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/refresh-token": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Refresh access token",
        "description": "Generate a new access token using a valid refresh token stored in cookies",
        "parameters": [
          {
            "name": "refreshToken",
            "in": "cookie",
            "required": true,
            "type": "string",
            "description": "Refresh token stored in HTTP-only cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "New access token generated successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "token refreshed"
                },
                "token": {
                  "type": "string",
                  "example": "new_access_token_string"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "No refresh token provided",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "No refresh token provided"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "403": {
            "description": "Invalid or expired refresh token",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Invalid refresh token / Refresh token expired"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "User associated with refresh token not found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "User not found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Server error during token refresh",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Server error"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/validate": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Validate JWT token",
        "description": "Validate the access token sent from frontend",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Token is valid",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Token is valid"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Token validation failed due to server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Something went wrong during token validation"
                },
                "error": {
                  "type": "string",
                  "example": "Error message"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/logout": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Logout user",
        "description": "Clears refresh token cookie, deletes refresh token from DB, and removes user session.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "refreshToken",
            "in": "cookie",
            "required": true,
            "type": "string",
            "description": "Refresh token stored in HTTP-only cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "User logged out successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "logged out"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "No refresh token found in cookie",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "no refresh token found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "User ID not found or no session found in DB",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "user id not found / no session found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal server error during logout process",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Something went wrong during logout"
                },
                "error": {
                  "type": "string",
                  "example": "error message"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/leaderboard": {
      "get": {
        "tags": [
          "Leaderboard"
        ],
        "summary": "Get leaderboard data",
        "description": "Retrieves the leaderboard with users ranked by their highest score in descending order.",
        "responses": {
          "200": {
            "description": "Successfully retrieved leaderboard data",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "leaderboard data"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "rank": {
                        "type": "number",
                        "example": 2
                      },
                      "id": {
                        "type": "number",
                        "example": 3
                      },
                      "score": {
                        "type": "number",
                        "example": 85
                      },
                      "level": {
                        "type": "number",
                        "example": 9
                      },
                      "date": {
                        "type": "string",
                        "example": "2025-06-01T18:00:00.000Z"
                      },
                      "username": {
                        "type": "string",
                        "example": "playerTwo"
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "No leaderboard data found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "no data found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "server error"
                },
                "error": {
                  "type": "string",
                  "example": "error.message"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/add": {
      "post": {
        "tags": [
          "Score"
        ],
        "summary": " add new user score",
        "description": "add new user score when the game ends , calculate the and confirm the level , check if its a new high score and update accordingly",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "score": {
                  "type": "number",
                  "example": 9
                },
                "level": {
                  "type": "number",
                  "example": 1
                },
                "cause": {
                  "type": "string",
                  "example": "self collition || wall collution"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns either a new score or a new high score. The message field will indicate the case.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "added new score"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 37
                    },
                    "user_id": {
                      "type": "number",
                      "example": 2
                    },
                    "score": {
                      "type": "number",
                      "example": 3
                    },
                    "level": {
                      "type": "number",
                      "example": 1
                    },
                    "created_at": {
                      "type": "string",
                      "example": "2025-06-03T21:42:19.655Z"
                    },
                    "cause": {
                      "type": "string",
                      "example": "self collision"
                    },
                    "incase_of_hig_score": {
                      "type": "object",
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "example": true
                        },
                        "message": {
                          "type": "string",
                          "example": "New high score set"
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "number",
                              "example": 2
                            },
                            "user_id": {
                              "type": "number",
                              "example": 2
                            },
                            "highest_score": {
                              "type": "number",
                              "example": 9
                            },
                            "highest_level": {
                              "type": "number",
                              "example": 1
                            },
                            "achieved_at": {
                              "type": "string",
                              "example": "2025-05-25T20:00:53.996Z"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Failed to add score due to level miss match (level received different from level calculated in backend)",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Failed to add score due to level missmatch"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": " if user token is expired ",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Token expired"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Failed due to some form of server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "server error"
                },
                "error": {
                  "type": "string",
                  "example": "error.message"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{userId}": {
      "get": {
        "tags": [
          "Score"
        ],
        "summary": "Get scores for a specific user",
        "description": "Retrieves all scores for a user if the JWT token matches the userId in the request parameter.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The ID of the user whose scores are being requested",
            "example": 2
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved scores for the user",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "retrieved user scores"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "example": 2
                      },
                      "user_id": {
                        "type": "number",
                        "example": 2
                      },
                      "score": {
                        "type": "number",
                        "example": 8
                      },
                      "level": {
                        "type": "number",
                        "example": 1
                      },
                      "created_at": {
                        "type": "string",
                        "example": "2025-06-03T18:30:00.000Z"
                      },
                      "cause": {
                        "type": "string",
                        "example": "self collision"
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User ID in the token does not match the ID in the URL",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "userId mismatch"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "No scores found for this user",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "no users scores found"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "server error"
                },
                "error": {
                  "type": "string",
                  "example": "error.message"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/highest/{userId}": {
      "get": {
        "tags": [
          "Score"
        ],
        "summary": "Get user's highest score",
        "description": "Retrieves the highest score for a specified user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The ID of the user whose highest score is being requested",
            "example": 2
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the highest score for the user",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "retrieved user highest score"
                },
                "max": {
                  "type": "number",
                  "example": 42
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Error getting highest score for the user",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "error getting score"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "server error"
                },
                "error": {
                  "type": "string",
                  "example": "error.message"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}